import tkinter as tk
import time
import cv2
import numpy as np
from collections import deque
from tkinter import messagebox
import random
from smtplib import SMTP
from PIL import Image
import RPi.GPIO as GPIO

root = tk.Tk()
root.geometry("300x250")
root.title("Piri Madeter")
ust=300
alt=250
ust2=840
alt2=625
root.config(background="#545050")
root.maxsize(width=ust,height=alt)
root.minsize(width=ust,height=alt)











servo_pin = 18
servo_pin2= 17

# GPIO pinlerini BCM modunda ayarla
GPIO.setmode(GPIO.BCM)

# Servo motorun bağlı olduğu pinin çıkış olarak ayarla
GPIO.setup(servo_pin, GPIO.OUT)
GPIO.setup(servo_pin2, GPIO.OUT)


# PWM (Pulse-Width Modulation) nesnesi oluştur ve frekansı ayarla
pwm1 = GPIO.PWM(servo_pin, 50)
pwm2 = GPIO.PWM(servo_pin2, 50)

# PWM sinyalini başlat
pwm1.start(0)
pwm2.start(0)


# Servo motoru 0 derece pozisyonda başlat
def set_servo_angle(angle):
		duty = angle / 18 + 2
		GPIO.output(servo_pin, True)
		GPIO.output(servo_pin2, True)
		pwm1.ChangeDutyCycle(duty)
		pwm2.ChangeDutyCycle(duty)
		time.sleep(1)
		GPIO.output(servo_pin, False)
		GPIO.output(servo_pin2, False)
		pwm1.ChangeDutyCycle(0)
		pwm2.ChangeDutyCycle(0)
		







harfler = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
               "l", "m", "n", "o", "p", "r", "s", "t", "u", "v", "y", "z"]

sayilar = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]

password = []
deger = random.choices(harfler + sayilar, k=10)
deger = "".join(deger)
print(deger)
sifre = deger


def giris():
    sif=abc.get()
    root.destroy()
    if sifre in sif:
        arayuz=tk.Tk()
        arayuz.geometry("800x625")
        arayuz.title("Kontrol Paneli")
        arayuz.config(background="#545050")
        yerel_saat=time.asctime().upper()


        vid = cv2.VideoCapture(0)

        # Declare the width and height in variables

        # Set the width and height
        vid.set(cv2.CAP_PROP_FRAME_WIDTH, 800)
        vid.set(cv2.CAP_PROP_FRAME_HEIGHT, 600)

        # Create a GUI app

        # Bind the app with Escape keyboard to
        # quit app whenever pressed
        arayuz.bind('<Escape>', lambda e: arayuz.quit())
        camframe=tk.Frame()
        camframe.place(x=75,y=5)
        camframe.config(width=645, height=530,background="#248046",borderwidth=1,relief="solid")

        # Create a label and display it on app
        label_widget = tk.Label(camframe)
        label_widget.place(x=0,y=45)

        def DC():
            GPIO.setmode(GPIO.BCM)
            GPIO.setwarnings(False)

            IN1=19
            IN2=13
            ENA=26
            

            GPIO.setup(IN1,GPIO.OUT)
            GPIO.setup(IN2,GPIO.OUT)
            GPIO.setup(ENA,GPIO.OUT)
            GPIO.output(IN1,GPIO.LOW)
            GPIO.output(IN2,GPIO.LOW)
            
            
            p=GPIO.PWM(ENA,500)
            p.start(0)
            

            def ileri(hiz):
                GPIO.output(IN1,GPIO.HIGH)
                GPIO.output(IN2,GPIO.LOW)
                p.ChangeDutyCycle(hiz)
                
            def geri(hiz):
                GPIO.output(IN1,GPIO.LOW)
                GPIO.output(IN2,GPIO.HIGH)
                p.ChangeDutyCycle(hiz)
                
               

            def dur():
                GPIO.output(IN1,GPIO.LOW)
                GPIO.output(IN2,GPIO.LOW)
                p.ChangeDutyCycle(0)
                
                

            while True:
                hiz=20   
                yon=input("Hangi yöne döndürmek istersiniz? \n")
                

                if yon=='i':
                    ileri(int(hiz))

                elif yon=='g':
                    geri(int(hiz))

                elif yon=='s':
                    dur()
                    
                elif yon=="k":
                    break
                
                else:
                    print("Hatali komut girisi!")
                    GPIO.cleanup()
                    break

		
		
		
        def open_camera():
            # nesne merkezini depolayacak veri tipi
            buffer_size = 16  # deque boyutu
            pts = deque(maxlen=buffer_size)

            # mavi renk aralığı - HSV
            blueLower = (84, 98, 0)
            blueUpper = (179, 255, 255)

            success, imgOriginal = vid.read()

            if success:
                    # detayi azaltip noise azaltma
                    blurred = cv2.GaussianBlur(imgOriginal, (11, 11), 0)

                    # hsv
                    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)

                    # mavi icin maske
                    mask = cv2.inRange(hsv, blueLower, blueUpper)

                    # maskenin etrafinda kalan gurultuleri sil
                    mask = cv2.erode(mask, None, iterations=1)
                    mask = cv2.dilate(mask, None, iterations=1)

                    # contour
                    (contours, _) = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

                    center = None

                    if len(contours) > 0:
                        # en buyuk konturu al
                        c = max(contours, key=cv2.contourArea)

                        # dikdortgene cevir
                        rect = cv2.minAreaRect(c)
                        ((x, y), (width, height), rotation) = rect

                        s = "x: {}, y: {}, width: {}, height: {}, rotation: {}".format(np.round(x),
                                                                                       np.round(y),
                                                                                       np.round(width),
                                                                                       np.round(height),
                                                                                       np.round(rotation))

                        print(s)

                        box = cv2.boxPoints(rect)
                        box = np.uint64(box)

                        # moment - goruntunun merkezini bulmamiza yarayan yapi
                        M = cv2.moments(c)
                        center = (int(M["m10"] / M["m00"]),
                                  int(M["m01"] / M["m00"]))

                        M2 = cv2.moments(c)
                        center2 = (int(M2["m10"] / M2["m00"]),
                                   int(M2["m01"] / M2["m00"]))

                        # contour'u cizdir
                        cv2.drawContours(imgOriginal, [box], 0, (0, 255, 255), 2)

                        # merkeze nokta ciz
                        cv2.circle(imgOriginal, center, 5, (255, 0, 255), -1)

                        # bilgileri ekrana yazdir
                        cv2.putText(imgOriginal, s, (20, 20), cv2.FONT_HERSHEY_COMPLEX_SMALL, 0.4, (0, 0, 0), 1)

                    # deque (nokta takip)
                    pts.appendleft(center)
                    for i in range(1, len(pts)):
                        if pts[i - 1] is None or pts[i] is None: continue
                        cv2.line(imgOriginal, pts[i - 1], pts[i], (0, 255, 0), 3)

                    captured_image = Image.fromarray(imgOriginal)

                        # Convert captured image to photoimage
                    photo_image = ImageTk.PhotoImage(image=captured_image)

                        # Displaying photoimage in the label
                    label_widget.photo_image = photo_image

                        # Configure image in the label
                    label_widget.configure(image=photo_image)

                        # Repeat the same process after every 10 seconds
                    label_widget.after(10, open_camera)

        frame1 = tk.Frame(arayuz, bg="#248046")
        frame1.place(x=0, y=0)
        frame1.config(width=840, height=50, borderwidth=1, relief="solid")

        arayuz.minsize(width=ust2, height=alt2)
        arayuz.maxsize(width=ust2, height=alt2)

        def yon():
            print("sola dönülüyor")
            labeln4 = tk.Label(text="Mevcut Yön:" + " " + "0", bg="#248046", fg="white", width=14, height=1,borderwidth=1, relief="solid")
            labeln4.place(x=10, y=570)
            set_servo_angle(0)

        def sag():
            print("sağa dönülüyor")

            labeln4 = tk.Label(text="Mevcut Yön:" + " " + "180", bg="#248046", fg="white", width=14, height=1,
                               borderwidth=1, relief="solid")
            labeln4.place(x=10, y=570)
            set_servo_angle(180)

        def duz():
            print("Düz Gidiliyor")
            labeln5 = tk.Label(text="Mevcut Yön:" + " " + "90", bg="#248046", fg="white", width=14, height=1,
                               borderwidth=1, relief="solid")
            labeln5.place(x=10, y=570)
            set_servo_angle(90)

        kullanici_isim = kullanici_varligi.get().upper()

        labeln1 = tk.Label(text="KULLANICI:" + " " + kullanici_isim, bg="#248046", fg="white")
        labeln1.place(x=10, y=15)

        labeln2 = tk.Label(text="OTURUM BAŞLANGICI:" + " " + yerel_saat, bg="#545050", fg="white")
        labeln2.place(x=10, y=600)

        sinir_cizgi = tk.Frame()
        sinir_cizgi.place(x=0, y=540)
        sinir_cizgi.config(width=840, height=15, background="#87DFBC", borderwidth=1, relief="solid")

        imza = tk.Label(text="PİRİ MADETER GELİŞTİRME GRUBU", bg="#87DFBC", borderwidth=1, relief="solid")
        imza.place(x=600, y=15)

        yonduz = tk.Button(text="Düz Git", command=duz, borderwidth=1, relief="solid")
        yonduz.place(x=700, y=560)

        yonsag1 = tk.Button(text="Sağa Dön", command=sag, borderwidth=1, relief="solid")
        yonsag1.place(x=745, y=590)

        yonsol = tk.Button(text="Sola Dön", command=yon, borderwidth=1, relief="solid")
        yonsol.place(x=660, y=590)

        cam_trigger = tk.Button(text="Kamerayı Aç",command=open_camera,borderwidth=1,relief="solid")
        cam_trigger.place(x=723, y=60)

        
        DC_trigger = tk.Button(text="Makarayı döndür",command=DC,borderwidth=1,relief="solid")
        DC_trigger.place(x=530, y=590)
        
        
        arayuz.mainloop()
        vid.release()

    else:
        hello = tk.Tk()
        hello.geometry("300x250")
        hello.title("Güvenlik Açığı")
        hello.config(background="#545050")
        hello.maxsize(width=ust, height=alt)
        hello.minsize(width=ust, height=alt)

        sa1 = tk.Label(text="Girdiğiniz şifre yanlış veya eksik!", bg="#545050", fg="#BF3939")
        sa1.place(x=60, y=100)

        # Create a button to open the camera in GUI app

buton1=tk.Button(text="Gönder",bg="#545050",fg="white",command=giris)
buton1.place(x=75,y=110)

abc=tk.StringVar()
giris1 = tk.Entry(textvariable=abc,validatecommand=buton1)
giris1.place(x=10,y=35)

label1=tk.Label(text="Lütfen Şifreyi giriniz",bg="#545050",fg="white")
label1.place(x=10,y=10)

label2=tk.Label(text="Kullanıcının ismi",bg="#545050",fg="white")
label2.place(x=10,y=60)

kullanici_varligi=tk.StringVar()
giris2=tk.Entry(textvariable=kullanici_varligi,validatecommand=buton1)
giris2.place(x=10,y=85)


root.mainloop()



pwm.stop()
GPIO.cleanup()
